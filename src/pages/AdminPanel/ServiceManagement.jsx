// import React, { useEffect, useState } from 'react';
// import {
//   Box,
//   Typography,
//   Grid,
//   Divider,
//   Chip,
//   Button,
//   Alert,
//   Paper,
//   Card,
//   CardContent,
//   Table,
//   TableBody,
//   TableCell,
//   TableHead,
//   TableRow,
//   FormControl,
//   InputLabel,
//   Select,
//   MenuItem,
//   TextField,
//   IconButton,
// } from '@mui/material';
// import DeleteIcon from '@mui/icons-material/Delete';
// import DashboardLayout from '../../components/DashboardLayout/DashboardLayout';
// import TitleBar from '../../components/Titlebar/Titlebar';
// import { jsPDF } from 'jspdf';
// import autoTable from 'jspdf-autotable';
// import Logo from '../../assets/Images/Logo/Logo.png';

// // Mock student data
// const mockStudents = [
//   { studentId: 'S123456', name: 'John Doe', email: 'john.doe@example.com' },
//   { studentId: 'S123457', name: 'Jane Smith', email: 'jane.smith@example.com' },
//   { studentId: 'S123458', name: 'Alice Johnson', email: 'alice.johnson@example.com' },
// ];

// // Mock holds data
// const mockHolds = [
//   { holdId: 'H001', studentId: 'S123456', service: 'Enrollment', reason: 'Unpaid Tuition Fee of $5000', createdAt: '2025-04-01' },
//   { holdId: 'H002', studentId: 'S123456', service: 'Transcript', reason: 'Unpaid General Service Fee of $300', createdAt: '2025-05-01' },
//   { holdId: 'H003', studentId: 'S123457', service: 'Grades', reason: 'Incomplete Documentation', createdAt: '2025-03-15' },
// ];

// // Available services for holds
// const services = ['Enrollment', 'Transcript', 'Grades', 'Fee Payments'];

// // Mock API functions
// const getStudents = async () =>
//   new Promise((resolve) => setTimeout(() => resolve(mockStudents), 500));

// const getHolds = async (studentId) =>
//   new Promise((resolve) =>
//     setTimeout(() => resolve(mockHolds.filter((hold) => hold.studentId === studentId)), 500)
//   );

// const addHold = async (hold) =>
//   new Promise((resolve) => setTimeout(() => resolve({ ...hold, holdId: `H${Date.now()}`, createdAt: new Date().toISOString().split('T')[0] }), 300));

// const removeHold = async (holdId) =>
//   new Promise((resolve) => setTimeout(() => resolve(holdId), 300));

// // Function to generate PDF of holds
// const generateHoldsPDF = (student, holds) => {
//   const doc = new jsPDF();

//   try {
//     console.log('[AdminHolds] Adding logo to PDF');
//     doc.addImage(Logo, 'PNG', 20, 10, 50, 20);
//   } catch (err) {
//     console.warn('[AdminHolds] Failed to add logo to PDF:', err.message);
//   }

//   // Core content
//   doc.setFontSize(12);
//   doc.text('Student Holds Report', 150, 20);
//   doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 40);
//   doc.text(`Student Name: ${student.name}`, 20, 50);
//   doc.text(`Student ID: ${student.studentId}`, 20, 60);
//   doc.text(`Email: ${student.email}`, 20, 70);

//   // Holds Table
//   autoTable(doc, {
//     startY: 80,
//     head: [['Hold ID', 'Service', 'Reason', 'Created At']],
//     body: holds.map((hold) => [
//       hold.holdId,
//       hold.service,
//       hold.reason,
//       new Date(hold.createdAt).toLocaleDateString(),
//     ]),
//     theme: 'striped',
//     styles: { fontSize: 10, cellPadding: 4 },
//     headStyles: { fillColor: '#094c50', textColor: '#ffffff' },
//   });

//   // Footer
//   doc.setFontSize(10);
//   doc.text('Generated by Admin Portal', 20, doc.lastAutoTable.finalY + 20);

//   return doc;
// };

// // AdminHolds Component
// const ServiceManagement = () => {
//   const [students, setStudents] = useState([]);
//   const [selectedStudentId, setSelectedStudentId] = useState('');
//   const [holds, setHolds] = useState([]);
//   const [newHold, setNewHold] = useState({ service: '', reason: '' });
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState('');

//   // Fetch students and initial holds
//   useEffect(() => {
//     const fetchData = async () => {
//       setLoading(true);
//       try {
//         const studentsData = await getStudents();
//         setStudents(studentsData);
//         if (studentsData.length > 0) {
//           setSelectedStudentId(studentsData[0].studentId);
//         }
//       } catch (err) {
//         setError('Failed to load students.');
//         console.error('[AdminHolds] Fetch Students Error:', err);
//       } finally {
//         setLoading(false);
//       }
//     };
//     fetchData();
//   }, []);

//   // Fetch holds when selected student changes
//   useEffect(() => {
//     if (selectedStudentId) {
//       const fetchHolds = async () => {
//         try {
//           const holdsData = await getHolds(selectedStudentId);
//           setHolds(holdsData);
//         } catch (err) {
//           setError('Failed to load holds.');
//           console.error('[AdminHolds] Fetch Holds Error:', err);
//         }
//       };
//       fetchHolds();
//     }
//   }, [selectedStudentId]);

//   // Handle student selection
//   const handleStudentChange = (event) => {
//     setSelectedStudentId(event.target.value);
//     setNewHold({ service: '', reason: '' });
//   };

//   // Handle new hold form changes
//   const handleNewHoldChange = (field) => (event) => {
//     setNewHold({ ...newHold, [field]: event.target.value });
//   };

//   // Handle adding a new hold
//   const handleAddHold = async () => {
//     if (!newHold.service || !newHold.reason) {
//       setError('Please select a service and provide a reason.');
//       return;
//     }
//     try {
//       const hold = { studentId: selectedStudentId, ...newHold };
//       const addedHold = await addHold(hold);
//       setHolds([...holds, addedHold]);
//       setNewHold({ service: '', reason: '' });
//       setError('');
//     } catch (err) {
//       setError('Failed to add hold.');
//       console.error('[AdminHolds] Add Hold Error:', err);
//     }
//   };

//   // Handle removing a hold
//   const handleRemoveHold = async (holdId) => {
//     try {
//       await removeHold(holdId);
//       setHolds(holds.filter((hold) => hold.holdId !== holdId));
//     } catch (err) {
//       setError('Failed to remove hold.');
//       console.error('[AdminHolds] Remove Hold Error:', err);
//     }
//   };

//   // Handle download PDF
//   const handleDownloadPDF = () => {
//     try {
//       console.log('[AdminHolds] Generating PDF for download');
//       const student = students.find((s) => s.studentId === selectedStudentId);
//       const doc = generateHoldsPDF(student, holds);
//       doc.save(`Holds_${selectedStudentId}.pdf`);
//       console.log('[AdminHolds] PDF downloaded:', `Holds_${selectedStudentId}.pdf`);
//     } catch (err) {
//       setError('Failed to download holds PDF.');
//       console.error('[AdminHolds] Download PDF Error:', err);
//     }
//   };

//   // Loading State
//   if (loading) {
//     return (
//       <DashboardLayout>
//         <Box sx={{ textAlign: 'center', mt: 4 }}>
//           <Typography variant="h6" color="textSecondary">
//             Loading Admin Holds...
//           </Typography>
//         </Box>
//       </DashboardLayout>
//     );
//   }

//   // Render when no students
//   if (students.length === 0) {
//     return (
//       <DashboardLayout>
//         <Grid container spacing={2} sx={{ background: 'linear-gradient(180deg, #f5f5f5 0%, #e0f7fa 100%)', p: 3 }}>
//           <Grid item xs={12}>
//             <TitleBar title="ADMIN HOLDS MANAGEMENT" />
//           </Grid>
//           <Grid item xs={12}>
//             <Alert severity="error" sx={{ mb: 3, borderRadius: '12px' }}>
//               No students available.
//             </Alert>
//           </Grid>
//         </Grid>
//       </DashboardLayout>
//     );
//   }

//   const selectedStudent = students.find((s) => s.studentId === selectedStudentId);

//   return (
//     <DashboardLayout>
//       <Grid container spacing={2} sx={{ background: 'linear-gradient(180deg, #f5f5f5 0%, #e0f7fa 100%)', p: 3 }}>
//         <Grid item xs={12}>
//           <TitleBar title="Service Management" />
//         </Grid>

//         {/* Error Display */}
//         {error && (
//           <Grid item xs={12}>
//             <Alert severity="error" sx={{ mb: 3, borderRadius: '12px' }} onClose={() => setError('')}>
//               {error}
//             </Alert>
//           </Grid>
//         )}

//         {/* Student Selection */}
//         <Grid item xs={12}>
//           <Card elevation={6} sx={{ borderRadius: '20px', overflow: 'hidden', backgroundColor: '#ffffff' }}>
//             <CardContent sx={{ p: 4 }}>
//               <Typography variant="h5" gutterBottom sx={{ color: '#094c50', fontWeight: 'bold' }}>
//                 Select Student
//               </Typography>
//               <Divider sx={{ mb: 2, borderColor: '#e0e0e0' }} />
//               <FormControl fullWidth sx={{ maxWidth: 400 }}>
//                 <InputLabel>Student</InputLabel>
//                 <Select
//                   value={selectedStudentId}
//                   onChange={handleStudentChange}
//                   label="Student"
//                 >
//                   {students.map((student) => (
//                     <MenuItem key={student.studentId} value={student.studentId}>
//                       {student.name} ({student.studentId})
//                     </MenuItem>
//                   ))}
//                 </Select>
//               </FormControl>
//               {selectedStudent && (
//                 <Box sx={{ mt: 2 }}>
//                   <Typography variant="body1">
//                     <strong>Name:</strong> {selectedStudent.name}
//                   </Typography>
//                   <Typography variant="body1">
//                     <strong>Email:</strong> {selectedStudent.email}
//                   </Typography>
//                 </Box>
//               )}
//             </CardContent>
//           </Card>
//         </Grid>

//         {/* Add Hold Form */}
//         <Grid item xs={12}>
//           <Card elevation={6} sx={{ borderRadius: '20px', overflow: 'hidden', backgroundColor: '#ffffff' }}>
//             <CardContent sx={{ p: 4 }}>
//               <Typography variant="h5" gutterBottom sx={{ color: '#094c50', fontWeight: 'bold' }}>
//                 Add Hold
//               </Typography>
//               <Divider sx={{ mb: 2, borderColor: '#e0e0e0' }} />
//               <Grid container spacing={2}>
//                 <Grid item xs={12} sm={4}>
//                   <FormControl fullWidth>
//                     <InputLabel>Service</InputLabel>
//                     <Select
//                       value={newHold.service}
//                       onChange={handleNewHoldChange('service')}
//                       label="Service"
//                     >
//                       {services.map((service) => (
//                         <MenuItem key={service} value={service}>
//                           {service}
//                         </MenuItem>
//                       ))}
//                     </Select>
//                   </FormControl>
//                 </Grid>
//                 <Grid item xs={12} sm={6}>
//                   <TextField
//                     fullWidth
//                     label="Reason"
//                     value={newHold.reason}
//                     onChange={handleNewHoldChange('reason')}
//                     variant="outlined"
//                   />
//                 </Grid>
//                 <Grid item xs={12} sm={2}>
//                   <Button
//                     variant="contained"
//                     fullWidth
//                     sx={{ bgcolor: '#2596be', '&:hover': { bgcolor: '#1a6d8c' }, textTransform: 'none' }}
//                     onClick={handleAddHold}
//                   >
//                     Add Hold
//                   </Button>
//                 </Grid>
//               </Grid>
//             </CardContent>
//           </Card>
//         </Grid>

//         {/* Existing Holds */}
//         <Grid item xs={12}>
//           <Card elevation={6} sx={{ borderRadius: '20px', overflow: 'hidden', backgroundColor: '#ffffff' }}>
//             <CardContent sx={{ p: 4 }}>
//               <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
//                 <Typography variant="h5" sx={{ color: '#094c50', fontWeight: 'bold' }}>
//                   Existing Holds
//                   <Chip
//                     label={`${holds.length} Holds`}
//                     size="small"
//                     color="error"
//                     sx={{ ml: 2, fontWeight: 'bold', bgcolor: '#d32f2f' }}
//                   />
//                 </Typography>
//                 <Button
//                   variant="contained"
//                   sx={{ bgcolor: '#2596be', '&:hover': { bgcolor: '#1a6d8c' }, textTransform: 'none' }}
//                   onClick={handleDownloadPDF}
//                   disabled={holds.length === 0}
//                 >
//                   Download Holds PDF
//                 </Button>
//               </Box>
//               <Divider sx={{ mb: 2, borderColor: '#e0e0e0' }} />
//               {holds.length === 0 ? (
//                 <Typography align="center" color="textSecondary">
//                   No holds for this student.
//                 </Typography>
//               ) : (
//                 <Table sx={{ minWidth: 300 }}>
//                   <TableHead>
//                     <TableRow>
//                       <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Hold ID</TableCell>
//                       <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Service</TableCell>
//                       <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Reason</TableCell>
//                       <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Created At</TableCell>
//                       <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Actions</TableCell>
//                     </TableRow>
//                   </TableHead>
//                   <TableBody>
//                     {holds.map((hold) => (
//                       <TableRow key={hold.holdId}>
//                         <TableCell>{hold.holdId}</TableCell>
//                         <TableCell>
//                           <Chip
//                             label={hold.service}
//                             color="error"
//                             size="small"
//                             sx={{ fontWeight: 'bold' }}
//                           />
//                         </TableCell>
//                         <TableCell>{hold.reason}</TableCell>
//                         <TableCell>{new Date(hold.createdAt).toLocaleDateString()}</TableCell>
//                         <TableCell>
//                           <IconButton
//                             color="error"
//                             onClick={() => handleRemoveHold(hold.holdId)}
//                           >
//                             <DeleteIcon />
//                           </IconButton>
//                         </TableCell>
//                       </TableRow>
//                     ))}
//                   </TableBody>
//                 </Table>
//               )}
//             </CardContent>
//           </Card>
//         </Grid>
//       </Grid>
//     </DashboardLayout>
//   );
// };

// export default ServiceManagement;

import React, { useEffect, useState } from 'react';
import {
  Box,
  Typography,
  Grid,
  Divider,
  Chip,
  Button,
  Alert,
  Paper,
  Card,
  CardContent,
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  IconButton,
  CircularProgress,
} from '@mui/material';
import DeleteIcon from '@mui/icons-material/Delete';
import DashboardLayout from '../../components/DashboardLayout/DashboardLayout';
import TitleBar from '../../components/Titlebar/Titlebar';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';
import Logo from '../../assets/Images/Logo/Logo.png';
import { getAllStudentsWithHolds, getHolds, addHold, removeHold } from '../../Endpoints/AdminEndpoints';

// Function to generate PDF of holds
const generateHoldsPDF = (student, holds) => {
  const doc = new jsPDF();

  try {
    console.log('[ServiceManagement] Adding logo to PDF');
    doc.addImage(Logo, 'PNG', 20, 10, 50, 20);
  } catch (err) {
    console.warn('[ServiceManagement] Failed to add logo to PDF:', err.message);
  }

  // Core content
  doc.setFontSize(12);
  doc.text('Student Holds Report', 150, 20);
  doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 40);
  doc.text(`Student Name: ${student.name}`, 20, 50);
  doc.text(`Student ID: ${student.studentId}`, 20, 60);
  doc.text(`Email: ${student.email}`, 20, 70);

  // Holds Table
  autoTable(doc, {
    startY: 80,
    head: [['Hold ID', 'Service', 'Reason', 'Created At']],
    body: holds.map((hold) => [
      hold.holdId,
      hold.service,
      hold.reason,
      new Date(hold.createdAt).toLocaleDateString(),
    ]),
    theme: 'striped',
    styles: { fontSize: 10, cellPadding: 4 },
    headStyles: { fillColor: '#094c50', textColor: '#ffffff' },
  });

  // Footer
  doc.setFontSize(10);
  doc.text('Generated by Admin Portal', 20, doc.lastAutoTable.finalY + 20);

  return doc;
};

// ServiceManagement Component
const ServiceManagement = () => {
  const [students, setStudents] = useState([]);
  const [selectedStudentId, setSelectedStudentId] = useState('');
  const [holds, setHolds] = useState([]);
  const [newHold, setNewHold] = useState({ service: '', reason: '' });
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const services = ['Enrollment', 'Transcript', 'Grades', 'Fee Payments'];

  // Fetch students
  useEffect(() => {
    const fetchStudents = async () => {
      setLoading(true);
      try {
        const response = await getAllStudentsWithHolds();
        const studentsData = response.data || [];
        setStudents(studentsData);
        if (studentsData.length > 0) {
          setSelectedStudentId(studentsData[0].studentId);
        }
      } catch (err) {
        setError('Failed to load students.');
        console.error('[ServiceManagement] Fetch Students Error:', err);
      } finally {
        setLoading(false);
      }
    };
    fetchStudents();
  }, []);

  // Fetch holds when selected student changes
  useEffect(() => {
    if (selectedStudentId) {
      const fetchHolds = async () => {
        try {
          const response = await getHolds(selectedStudentId);
          setHolds(response.data || []);
        } catch (err) {
          setError('Failed to load holds.');
          console.error('[ServiceManagement] Fetch Holds Error:', err);
        }
      };
      fetchHolds();
    }
  }, [selectedStudentId]);

  // Handle student selection
  const handleStudentChange = (event) => {
    setSelectedStudentId(event.target.value);
    setNewHold({ service: '', reason: '' });
    setError('');
  };

  // Handle new hold form changes
  const handleNewHoldChange = (field) => (event) => {
    setNewHold({ ...newHold, [field]: event.target.value });
  };

  // Handle adding a new hold
  const handleAddHold = async () => {
    if (!newHold.service || !newHold.reason) {
      setError('Please select a service and provide a reason.');
      return;
    }
    try {
      const holdDto = {
        studentId: selectedStudentId,
        service: newHold.service,
        reason: newHold.reason,
      };
      const response = await addHold(holdDto);
      setHolds([...holds, response.data]);
      setNewHold({ service: '', reason: '' });
      setError('');
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to add hold.');
      console.error('[ServiceManagement] Add Hold Error:', err);
    }
  };

  // Handle removing a hold
  const handleRemoveHold = async (holdId) => {
    try {
      await removeHold(holdId);
      setHolds(holds.filter((hold) => hold.holdId !== holdId));
      setError('');
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to remove hold.');
      console.error('[ServiceManagement] Remove Hold Error:', err);
    }
  };

  // Handle download PDF
  const handleDownloadPDF = () => {
    try {
      console.log('[ServiceManagement] Generating PDF for download');
      const student = students.find((s) => s.studentId === selectedStudentId);
      const doc = generateHoldsPDF(student, holds);
      doc.save(`Holds_${selectedStudentId}.pdf`);
      console.log('[ServiceManagement] PDF downloaded:', `Holds_${selectedStudentId}.pdf`);
    } catch (err) {
      setError('Failed to download holds PDF.');
      console.error('[ServiceManagement] Download PDF Error:', err);
    }
  };

  // Loading State
  if (loading) {
    return (
      <DashboardLayout>
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh' }}>
          <CircularProgress />
        </Box>
      </DashboardLayout>
    );
  }

  // Render when no students
  if (students.length === 0) {
    return (
      <DashboardLayout>
        <Grid container spacing={2} sx={{ background: 'linear-gradient(180deg, #f5f5f5 0%, #e0f7fa 100%)', p: 3 }}>
          <Grid item xs={12}>
            <TitleBar title="Service Management" />
          </Grid>
          <Grid item xs={12}>
            <Alert severity="error" sx={{ mb: 3, borderRadius: '12px' }}>
              No students available.
            </Alert>
          </Grid>
        </Grid>
      </DashboardLayout>
    );
  }

  const selectedStudent = students.find((s) => s.studentId === selectedStudentId);

  return (
    <DashboardLayout>
      <Grid container spacing={2} sx={{ background: 'linear-gradient(180deg, #f5f5f5 0%, #e0f7fa 100%)', p: 3 }}>
        <Grid item xs={12}>
          <TitleBar title="Service Management" />
        </Grid>

        {/* Error Display */}
        {error && (
          <Grid item xs={12}>
            <Alert severity="error" sx={{ mb: 3, borderRadius: '12px' }} onClose={() => setError('')}>
              {error}
            </Alert>
          </Grid>
        )}

        {/* Student Selection */}
        <Grid item xs={12}>
          <Card elevation={6} sx={{ borderRadius: '20px', overflow: 'hidden', backgroundColor: '#ffffff' }}>
            <CardContent sx={{ p: 4 }}>
              <Typography variant="h5" gutterBottom sx={{ color: '#094c50', fontWeight: 'bold' }}>
                Select Student
              </Typography>
              <Divider sx={{ mb: 2, borderColor: '#e0e0e0' }} />
              <FormControl fullWidth sx={{ maxWidth: 400 }}>
                <InputLabel>Student</InputLabel>
                <Select
                  value={selectedStudentId}
                  onChange={handleStudentChange}
                  label="Student"
                >
                  {students.map((student) => (
                    <MenuItem key={student.studentId} value={student.studentId}>
                      {student.name} ({student.studentId})
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              {selectedStudent && (
                <Box sx={{ mt: 2 }}>
                  <Typography variant="body1">
                    <strong>Name:</strong> {selectedStudent.name}
                  </Typography>
                  <Typography variant="body1">
                    <strong>Email:</strong> {selectedStudent.email}
                  </Typography>
                </Box>
              )}
            </CardContent>
          </Card>
        </Grid>

        {/* Add Hold Form */}
        <Grid item xs={12}>
          <Card elevation={6} sx={{ borderRadius: '20px', overflow: 'hidden', backgroundColor: '#ffffff' }}>
            <CardContent sx={{ p: 4 }}>
              <Typography variant="h5" gutterBottom sx={{ color: '#094c50', fontWeight: 'bold' }}>
                Add Hold
              </Typography>
              <Divider sx={{ mb: 2, borderColor: '#e0e0e0' }} />
              <Grid container spacing={2}>
                <Grid item xs={12} sm={4}>
                  <FormControl fullWidth>
                    <InputLabel>Service</InputLabel>
                    <Select
                      value={newHold.service}
                      onChange={handleNewHoldChange('service')}
                      label="Service"
                    >
                      {services.map((service) => (
                        <MenuItem key={service} value={service}>
                          {service}
                        </MenuItem>
                      ))}
                    </Select>
                  </FormControl>
                </Grid>
                <Grid item xs={12} sm={6}>
                  <TextField
                    fullWidth
                    label="Reason"
                    value={newHold.reason}
                    onChange={handleNewHoldChange('reason')}
                    variant="outlined"
                  />
                </Grid>
                <Grid item xs={12} sm={2}>
                  <Button
                    variant="contained"
                    fullWidth
                    sx={{ bgcolor: '#2596be', '&:hover': { bgcolor: '#1a6d8c' }, textTransform: 'none' }}
                    onClick={handleAddHold}
                  >
                    Add Hold
                  </Button>
                </Grid>
              </Grid>
            </CardContent>
          </Card>
        </Grid>

        {/* Existing Holds */}
        <Grid item xs={12}>
          <Card elevation={6} sx={{ borderRadius: '20px', overflow: 'hidden', backgroundColor: '#ffffff' }}>
            <CardContent sx={{ p: 4 }}>
              <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
                <Typography variant="h5" sx={{ color: '#094c50', fontWeight: 'bold' }}>
                  Existing Holds
                  <Chip
                    label={`${holds.length} Holds`}
                    size="small"
                    color="error"
                    sx={{ ml: 2, fontWeight: 'bold', bgcolor: '#d32f2f' }}
                  />
                </Typography>
                <Button
                  variant="contained"
                  sx={{ bgcolor: '#2596be', '&:hover': { bgcolor: '#1a6d8c' }, textTransform: 'none' }}
                  onClick={handleDownloadPDF}
                  disabled={holds.length === 0}
                >
                  Download Holds PDF
                </Button>
              </Box>
              <Divider sx={{ mb: 2, borderColor: '#e0e0e0' }} />
              {holds.length === 0 ? (
                <Typography align="center" color="textSecondary">
                  No holds for this student.
                </Typography>
              ) : (
                <Table sx={{ minWidth: 300 }}>
                  <TableHead>
                    <TableRow>
                      <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Hold ID</TableCell>
                      <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Service</TableCell>
                      <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Reason</TableCell>
                      <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Created At</TableCell>
                      <TableCell sx={{ fontWeight: 'bold', color: '#094c50' }}>Actions</TableCell>
                    </TableRow>
                  </TableHead>
                  <TableBody>
                    {holds.map((hold) => (
                      <TableRow key={hold.holdId}>
                        <TableCell>{hold.holdId}</TableCell>
                        <TableCell>
                          <Chip
                            label={hold.service}
                            color="error"
                            size="small"
                            sx={{ fontWeight: 'bold' }}
                          />
                        </TableCell>
                        <TableCell>{hold.reason}</TableCell>
                        <TableCell>{new Date(hold.createdAt).toLocaleDateString()}</TableCell>
                        <TableCell>
                          <IconButton
                            color="error"
                            onClick={() => handleRemoveHold(hold.holdId)}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              )}
            </CardContent>
          </Card>
        </Grid>
      </Grid>
    </DashboardLayout>
  );
};

export default ServiceManagement;